name: Continuous Integration

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Get Github Actions IP
      id: ip
      uses: haythem/public-ip@v1.2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_RDS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_RDS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Add Github Actions IP to RDS Security group
      run: |
        aws rds authorize-db-security-group-ingress --db-security-group-name ${{ secrets.RDS_SECURITY_GROUP_NAME }} --cidrip ${{ steps.ip.outputs.ipv4 }}/32


    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Write environment variables to root .env file
      run: |
        echo "GF_USER=${{ secrets.GF_USER }}" > .env
        echo "GF_PASSWORD=${{ secrets.GF_PASSWORD }}" >> .env
        echo "DEBUG=${{ secrets.DEBUG }}" >> .env

    - name: Write environment variables to backend .env file
      run: |
        echo "OPENAI_SECRET_KEY=${{ secrets.OPENAI_SECRET_KEY }}" > backend/config/.env
        echo "DEBUG=${{ secrets.DEBUG }}" >> backend/config/.env
        echo "DB_ENGINE=${{ secrets.DB_ENGINE }}" >> backend/config/.env
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> backend/config/.env
        echo "DB_USER=${{ secrets.DB_USER }}" >> backend/config/.env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> backend/config/.env
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> backend/config/.env
        echo "DB_PORT=${{ secrets.DB_PORT }}" >> backend/config/.env
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> backend/config/.env
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> backend/config/.env
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> backend/config/.env
        echo "AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }}" >> backend/config/.env
        echo "AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }}" >> backend/config/.env
        echo "AWS_S3_ENDPOINT_URL=${{ secrets.AWS_S3_ENDPOINT_URL }}" >> backend/config/.env
        echo "AWS_S3_DOWNLOAD_URL=${{ secrets.AWS_S3_DOWNLOAD_URL }}" >> backend/config/.env
        echo "CORS_ORIGIN_WHITELIST=${{ secrets.CORS_ORIGIN_WHITELIST }}" >> backend/config/.env
        echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> backend/config/.env

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt

    - name: Django test
      run: |
        cd backend
        python manage.py check
        python manage.py test

    - name: Setup Node.js environment
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        cd frontend
        yarn install

    - name: Yarn test
      run: |
        cd frontend
        yarn build && yarn test

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Docker compose build
      run: docker-compose -f docker-compose.prod.yml build

    - name: Docker compose up
      run: docker-compose -f docker-compose.prod.yml up -d

    - name: Remove Github Actions IP from RDS Security group
      run: |
        aws rds revoke-db-security-group-ingress --db-security-group-name ${{ secrets.RDS_SECURITY_GROUP_NAME }} --cidrip ${{ steps.ip.outputs.ipv4 }}/32
