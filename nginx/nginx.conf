upstream backend {
    # Docker Compose의 컨테이너 이름과 포트를 지정한다.
    # 이 프로젝트에서는 gunicorn과 django를 호출하게 되나 프로젝트별로 다를 수 있다.
    server backend:8000;
}

server {
    listen 80;
    server_name www.techeer-team-a.store;  # 차후 배포 시 우리 도메인 이름으로 설정해야 함!
    server_tokens off; # 응답 헤더에서 서버 정보를 감춥니다.
    client_max_body_size 1G; # 클라이언트로부터 전송되는 요청의 최대 크기를 1GB로 제한합니다.

    # Access 로그를 /var/log/nginx/access.log 파일에 남기도록 설정
    access_log /var/log/nginx/access.log;

    location /api/v1/ { # 주소가 /api/v1/으로 시작하면 하단의 proxy_pass로 포워딩한다.
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header   X-Forwarded-Host $server_name;
        proxy_set_header Host $host;
        proxy_redirect off;
        proxy_connect_timeout 300s;
        proxy_read_timeout 600s;
        proxy_send_timeout 600s;
        proxy_buffer_size          128k;
        proxy_buffers              4 256k;
        proxy_busy_buffers_size    256k;
        proxy_pass http://backend; # upstream backend에서 정의한 컨테이너와 포트를 변수처럼 가져온다.
    }
    # static 파일 디렉토리 연결
    location /staticfiles {
        alias /app/backend/staticfiles;
    }
    # media 파일 디렉토리 연결
    location /mediafiles {
        alias /app/backend/mediafiles;
    }
    # ignore cache frontend
    location ~* (service-worker\.js)$ {
        add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
        expires off;
        proxy_no_cache 1;
    }
    location / {
        # nginx 컨테이너가 실행되는 시점에서는 /var/www/frontend/에 build_folder의 내용이 들어있게 된다. docker-compose.yml 파일 참조.
        root /var/www/frontend; # location에서 정의된 특정 URL이 아닌 루트로 들어오면 기본값으로서 Nginx 컨테이너 안의 /var/www/frontend 내부의 (리액트에서 빌드해준) 정적 파일로 응답한다.
        index  index.html index.htm;
        try_files $uri $uri/ /index.html;
    }
}

# 추후 SSL 적용 시 하단 부분을 수정해서 사용한다.
# server {
#     listen 443 ssl;
#     server_name www.techeer-team-a.store;  # 차후 배포 시 우리 도메인 이름으로 설정해야 함!
#     server_tokens off; # 응답 헤더에서 서버 정보를 감춥니다.
#     client_max_body_size 1G; # 클라이언트로부터 전송되는 요청의 최대 크기를 1GB로 제한합니다.

#     ssl_certificate /etc/letsencrypt/live/도메인/fullchain.pem;  # ssl 인증서 사용
#     ssl_certificate_key /etc/letsencrypt/live/도메인/privkey.pem;
#     include /etc/letsencrypt/options-ssl-nginx.conf;
#     ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

#     location /api/v1/ { # 주소가 /api/v1/으로 시작하면 하단의 proxy_pass로 포워딩한다.
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto https;
#         proxy_set_header   X-Forwarded-Host $server_name;
#         proxy_set_header Host $host;
#         proxy_redirect off;
#         proxy_connect_timeout 300s;
#         proxy_read_timeout 600s;
#         proxy_send_timeout 600s;
#         proxy_buffer_size          128k;
#         proxy_buffers              4 256k;
#         proxy_busy_buffers_size    256k;
#         proxy_pass http://backend; # upstream backend에서 정의한 컨테이너와 포트를 변수처럼 가져온다.
#     }
#     # ignore cache frontend
#     location ~* (service-worker\.js)$ {
#         add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
#         expires off;
#         proxy_no_cache 1;
#     }
#     location / {
#         # nginx 컨테이너가 실행되는 시점에서는 /var/www/frontend/에 build_folder의 내용이 들어있게 된다. docker-compose.yml 파일 참조.
#         root /var/www/frontend; # location에서 정의된 특정 URL이 아닌 루트로 들어오면 기본값으로서 Nginx 컨테이너 안의 /var/www/frontend 내부의 (리액트에서 빌드해준) 정적 파일로 응답한다.
#         index  index.html index.htm;
#         try_files $uri $uri/ /index.html;
#     }
# }